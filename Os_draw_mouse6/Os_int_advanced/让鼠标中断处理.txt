内核中对8259初始化时，启动鼠标中断
mov  al, 11111001b        ; 允许键盘中断
    out  021h, al
    call io_delay

mov  al, 11101111b        ; 允许鼠标中断
out  0A1h, al
call io_delay

## 鼠标电路的初始化
对应端口0x64,读取此端口检测鼠标电路的状态,内核从该端口读入一个字节
若字节第二个bit为0,表明鼠标电路接受内核的命令，再给鼠标电路发送数据前内核需要反复从0x64读数据，检测是否为0
#define  PORT_KEYDAT  0x0060
#define  PORT_KEYSTA  0x0064
#define  PORT_KEYCMD  0x0064
#define  KEYSTA_SEND_NOTREADY  0x02
#define  KEYCMD_WRITE_MODE  0x60
#define  KBC_MODE     0x47

void  wait_KBC_sendready() {
for(;;) {
    if ((io_in8(PORT_KEYSTA) & KEYSTA_SEND_NOTREADY) == 0) {
        break;
    }
}

当bit位为0,鼠标可以接受数据,向0x60发送数据来配置鼠标,鼠标的初始化是通过键盘电路实现的
void init_keyboard(void) {
    wait_KBC_sendready(); 
    io_out8(PORT_KEYCMD, KEYCMD_WRITE_MODE);    //键盘电路进入数据接受状态
    wait_KBC_sendready();
    io_out8(PORT_KEYDAT, KBC_MODE); //要求键盘电路启动鼠标模式，鼠标产生的数据可以通过键盘电路0x60读取
    return;
}

向鼠标发送数据时,先向端口发送一个字节的数据，改数据的值是0xd4,
之后任何向端口0x60写入的数据都会被传送给鼠标
#define KEYCMD_SENDTO_MOUSE 0xd4
#define MOUSECMD_ENABLE 0xf4

void enable_mouse(void) {
    wait_KBC_sendready();
    io_out8(PORT_KEYCMD, KEYCMD_SENDTO_MOUSE);//之后任何向端口0x60写入的数据都会被传送给鼠标
    wait_KBC_sendready();
    io_out8(PORT_KEYDAT, MOUSECMD_ENABLE);  //对鼠标进行激活，向CPU发中断信号，设置好中断函数，相关代码会执行
    return;
}

LABEL_IDT:
%rep  33
    Gate  SelectorCode32, SpuriousHandler,0, DA_386IGate
%endrep

.021h:
    Gate SelectorCode32, KeyBoardHandler,0, DA_386IGate

%rep  10
    Gate  SelectorCode32, SpuriousHandler,0, DA_386IGate
%endrep

.2CH:
    Gate SelectorCode32, mouseHandler,0, DA_386IGate

初始化8259A芯片时，将主8259A的初始中断向量设置为0x20,把从8259A的初始中断向量设置为0x28
鼠标中断信号线是从片IRQ4，所以它的中断向量为0x28+4
鼠标中断处理函数mouseHandler代码
_mouseHandler:
mouseHandler equ _mouseHandler - $$
     push es
     push ds
     pushad
     mov  eax, esp
     push eax

     call intHandlerForMouse


     pop  eax
     mov  esp, eax
     popad
     pop  ds
     pop  es
     iretd

这段代码中，调用了来自C语言实现的函数叫intHandlerForMouse
void intHandlerForMouse(char* esp) {
    char*vram = bootInfo.vgaRam;
    int xsize = bootInfo.screenX, ysize = bootInfo.screenY;
    showString(vram, xsize, 0, 0, COL8_FFFFFF, "PS/2 Mouse Handler");   
    for(;;) {
        io_hlt();
    }
} 这样鼠标激活后，立马向CPU发中断


## 数据缓存机制改进
鼠标激活后,鼠标移动，向CPU发送大量坐标数据,内核要把鼠标发送数据存起来以便中断函数处理

// FIFO8 是用于数据缓存结构体，buf可以根据不同的需求进行变换
// 可以通过fifo8_init设置32字节的内存用于键盘缓冲,设置128字节用于鼠标。
// p为原来的next_w,q为原来的next_r
struct FIFO8 {
    unsigned char* buf;
    int p, q, size, free, flags;
};

void fifo8_init(struct FIFO8 *fifo, int size, unsigned char *buf) {
    fifo->size = size;
    fifo->buf = buf;
    fifo->free = size;
    fifo->flags = 0;
    fifo->p = 0;
    fifo->q = 0;
    return ;
}

#define FLAGS_OVERRUN 0x0001
int fifo8_put(struct FIFO8 *fifo, unsigned char data) {
    if (fifo->free ==0) {
        fifo->flags |= FLAGS_OVERRUN;
        return -1;
    }

    fifo->buf[fifo->p] = data;
    fifo->p++;
    if (fifo->p == fifo->size) {
        fifo->p = 0;
    }

    fifo->free--;
    return 0;
}

int fifo8_get(struct FIFO8 *fifo) {
    int data;
    if (fifo->free == fifo->size) {
        return -1;
    }

    data = fifo->buf[fifo->q];
    fifo->q++;
    if (fifo->q == fifo->size) {
        fifo->q = 0;
    }

    fifo->free++;
    return data;
}

int fifo8_status(struct FIFO8 *fifo) {
    return fifo->size - fifo->free;
}

从鼠标接受数据
static struct FIFO8 keyinfo;
static struct  FIFO8 mouseinfo;

static char keybuf[32];
static char  mousebuf[128];


// 先初始化鼠标的缓存结构体
void CMain(void) {
    ....
    fifo8_init(&mouseinfo, 128, mousebuf);
    ....

    int data = 0;
    for(;;) {
       io_cli();
        // 判断缓存区是否有数据到达
       if (fifo8_status(&keyinfo) + fifo8_status(&mouseinfo)  == 0) {
           io_stihlt();
       } else if(fifo8_status(&keyinfo) != 0){
        // 键盘缓冲区
           io_sti();
           data = fifo8_get(&keyinfo);
           char* pStr = charToHexStr(data);
           static int showPos = 0;
           showString(vram, xsize, showPos, 0, COL8_FFFFFF, pStr);
           showPos += 32; 

       } else if (fifo8_status(&mouseinfo) != 0) {
        // 鼠标缓冲区
           show_mouse_info();
       }
    }
}

// 由于鼠标一次性发送的数据太多，可以限制只输出4个字节数据，128个像素
void  show_mouse_info() {
    char*vram = bootInfo.vgaRam;
    int xsize = bootInfo.screenX, ysize = bootInfo.screenY;
    unsigned char data = 0;

    io_sti();
    data = fifo8_get(&mouseinfo);
    char* pStr = charToHexStr(data);
    static int mousePos = 16;
    if (mousePos <= 256) {
        showString(vram, xsize, mousePos, 16, COL8_FFFFFF, pStr);
        mousePos += 32;
    }
}

// PIC1_OCW2 的值是0xA0, 也就是从8259A芯片的端口，PIC_OCW2是主8259A芯片的端口
// 中断处理后，要想再次接收中断信号，就必须向中断控制器发送一个字节的数据,就是OCW2
// OCW2[0-2] 用来表示中断的优先级，OCW2[3-4]这两位必须设置为0
// OCW[5]这一位称之为End of Interrupt, 这一位设置为1,表示当前中断处理结束，控制器可以继续调用中断函数处理到来的中断信号
// OCW2[6-7]置零
void intHandlerForMouse(char* esp) {
    unsigned char data;
    io_out8(PIC1_OCW2, 0x20);
    io_out8(PIC_OCW2, 0x20);

    // 从0x60读取鼠标发送的数据
    data = io_in8(PORT_KEYDAT);
    fifo8_put(&mouseinfo, data);    //写入缓存区
}



