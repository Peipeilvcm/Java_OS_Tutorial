当鼠标被激活后，它会立马给内核发送一个字节数据0xfa
当内核收到这个数据后开始积攒数据，每收到三个字节绘制鼠标
第一个字节00XX1***, 三个*为1时分别代表左键滚轮右键
第二个字节鼠标的左右移动
第三个字节鼠标的上下移动
struct MOUSE_DEC {
    unsigned char buf[3], phase; // buf存三个数据,phase当前收到第几个数据
    int x, y, btn; // x水平移动的坐标变换,y上下移动的鼠标坐标变换,btn鼠标哪个键按下
};

//解析鼠标发送的数据
int mouse_decode(struct MOUSE_DEC *mdec, unsigned char dat) {
    if (mdec->phase == 0) {
        if (dat == 0xfa) {
           mdec->phase = 1;
        }

       return 0;
    }

    if (mdec->phase == 1) {
        if ((dat & 0xc8) == 0x08) {
            mdec->buf[0] = dat;
            mdec->phase = 2;
        }

        return 0;
    }

    if (mdec->phase == 2) {
        mdec->buf[1] = dat;
        mdec->phase = 3;
        return 0;
    }

    if (mdec->phase == 3) {
        mdec->buf[2] = dat;
        mdec->phase = 1;
        mdec->btn = mdec->buf[0] & 0x07;
        mdec->x = mdec->buf[1];
        mdec->y = mdec->buf[2];
        if ((mdec->buf[0] & 0x10) != 0) {
           mdec->x |= 0xffffff00;
        }

        if ((mdec->buf[0] & 0x20) != 0) {
           mdec->y |= 0xffffff00;
        }

        mdec->y = -mdec->y;
        return 1;
    }

    return -1;
}

// 内核主函数，重新绘制鼠标
static int mx = 0, my = 0;
void CMain() {

   ....

   mx = (xsize - 16) / 2;
   my = (ysize - 28 - 16) / 2;  
   init_mouse_cursor(mcursor, COL8_008484);
   putblock(vram, xsize, 16, 16, mx, my, mcursor, 16);

  .....

   else if (fifo8_status(&mouseinfo) != 0) {
           show_mouse_info();
       }
}

void computeMousePosition(struct MOUSE_DEC* mdec) {
    mx += mdec->x;
    my += mdec->y;
    if (mx < 0) {
       mx = 0;
    }

    if (my < 0) {
       my = 0;
    }

    if (mx > xsize - 16) {
       mx = xsize - 16;
    }
    if (my > ysize - 16) {
       my = ysize - 16;
    }

}

// eraseMouse 作用是使用桌面的背景颜色将鼠标抹掉
void eraseMouse(char* vram) {
    boxfill8(vram, xsize, COL8_008484, mx, my, mx+15, my+15);
}

// 根据鼠标新的坐标重新绘制鼠标图案
void drawMouse(char* vram) {
    putblock(vram, xsize, 16, 16, mx, my, mcursor, 16);
}

void  show_mouse_info(void) {
    char*vram = bootInfo.vgaRam;
    unsigned char data = 0;

    io_sti();
    data = fifo8_get(&mouseinfo);
    if (mouse_decode(&mdec, data) != 0) {
         eraseMouse(vram);
         computeMousePosition(&mdec);
         drawMouse(vram);
    }
}

编译，反汇编后，出现下面错误
error: short jump is out of range
汇编语言中跳转指令不能超过127字节，解决方案加入near关键词 jmp near ?0_57
