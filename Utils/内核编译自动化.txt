编写makeflie文件
    cp ckernel_u.asm win_sheet.h win_sheet.c mem_util.h mem_util.c write_vga_desktop.c makefile '/media/psf/Home/Documents/操作系统/文档/19/OS-kernel-win-sheet/'
ckernel_u.asm : ckernel.o
    ./objconv -fnasm ckernel.o ckernel_u.asm
ckernel.o : write_vga_desktop.o win_sheet.o mem_util.o
    ld -m elf_i386 -r write_vga_desktop.o mem_util.o win_sheet.o -o ckernel.o
write_vga_desktop.o : write_vga_desktop.c win_sheet.c win_sheet.h mem_util.c mem_util.h
    gcc -m32 -fno-asynchronous-unwind-tables -s -c -o write_vga_desktop.o write_vga_desktop.c
win_sheet.o : win_sheet.c win_sheet.h
    gcc -m32 -fno-asynchronous-unwind-tables -s -c -o win_sheet.o win_sheet.c
mem_util.o : mem_util.h mem_util.c
    gcc -m32 -fno-asynchronous-unwind-tables -s -c -o mem_util.o mem_util.c


makefile 由以下文法格式组成：
target : prerequest 
command

反汇编后的文件内不必要语句删除。global或extern等SECTION等
写入JAVA程序,自动删除
public void process() {
    String lineText = null;
    try {
        while ((lineText = fileReader.readLine()) != null) {
            String line = lineText.toLowerCase();
            if (line.contains("global") || line.contains("extern") || line.contains("section")) {
                continue;
            }

            fileBuffer.append(lineText).append("\r\n");
        }

        fileReader.close();
        BufferedWriter bw = new BufferedWriter(new FileWriter("ckernel.asm"));
        bw.write(fileBuffer.toString());
        bw.close();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
}

还需要处理反汇编后的代码文件，编译起来会出现这种错误error: short jump is out of range
JAVA程序添加 near
private void handleOutOfRangeError() {
    try {
        ArrayList<String> jumps = new ArrayList<String>();
        jumps.add("jz");
        jumps.add("jnz");
        jumps.add("jc");
        jumps.add("jne");
        jumps.add("jg ");
        jumps.add("jle");
        jumps.add("jge");


        fileReader = new BufferedReader(new FileReader("ckernel.asm"));
        File f = new File("ckernenl.asm");
        fileBuffer = new StringBuffer((int)f.length()); 
        String lineText = null;

        while ((lineText = fileReader.readLine()) != null) {
            String line = lineText.toLowerCase();
            for(int i = 0; i < jumps.size(); i++) {
                if (line.contains(jumps.get(i))) {
                    int pos = line.indexOf(jumps.get(i));
                    String strFirst = line.substring(0, pos + jumps.get(i).length());
                    String strSecond = line.substring(pos + jumps.get(i).length(), line.length());
                    lineText = strFirst + " near " + strSecond;
                    break;
                }
            }

            fileBuffer.append(lineText).append("\r\n");
        }

        fileReader.close();
        BufferedWriter bw = new BufferedWriter(new FileWriter("ckernel.asm"));
        bw.write(fileBuffer.toString());
        bw.close();

    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
}

通过java调用nasm程序来编译修改好的内核代码
自动将.asm转化为编译为.bat
public void createKernelBinary() {
    handleOutOfRangeError();

    try {
        Process process = Runtime.getRuntime().exec("nasm -o kernel.bat kernel.asm");
        readProcessOutput(process);
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }

}

private void readProcessOutput(Process process) {
    read(process.getInputStream(), System.out);
    read(process.getErrorStream(), System.err);
}

private void read(InputStream inputStream, PrintStream out) {
    try {
        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
        String line;
        while ((line = reader.readLine()) != null) {
            out.println(line);
        }
    } catch(IOException e) {
        e.printStackTrace();
    } finally {
        try {
            inputStream.close();
        } catch(IOException e) {
            e.printStackTrace();
        }
    }
}
